{"version":3,"sources":["components/TimerControls.js","components/Timer.js","components/LengthControls.js","components/App.js","index.js"],"names":["TimerControls","props","id","onClick","handleStartPause","isRunning","resetTimer","Timer","useEffect","currTime","minutes","seconds","handleSessionBreakChange","timeDisplay","sessionOrBreak","parseInt","className","src","LengthControls","e","updateLengthAndTimer","breakLength","sessionLength","App","initialState","state","bind","countdown","sessionOrBreakLength","newLengthValue","this","setState","convertToFormattedTimeString","time","timeString","toString","currMinutes","currSeconds","timer","Date","setMinutes","updatedMinutes","getMinutes","updatedSeconds","getSeconds","timerID","clear","alarm","document","getElementById","play","setTimeout","prevState","accurateInterval","duration","load","updateSessionOrBreakLength","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"/session-timer/static/js/main.a6b48ecc.chunk.js","sourcesContent":["\nconst TimerControls = props => {\n\treturn(\n\t\t<>\n\t\t\t<button id=\"start_stop\" onClick={ () => props.handleStartPause() }> {props.isRunning ? \"Pause\" : \"Start\"}</button>\n\t\t\t<button id=\"reset\" onClick={ () => props.resetTimer() }> Reset </button>\n\t\t</>\n\t)\n}\n\nexport default TimerControls;\n","import TimerControls from './TimerControls';\nimport { useEffect } from 'react';\n\nconst Timer = props => {\n  /*if the component (re-)renders and the time has run out,\n  * the timer changes from session to break and vice versa\n  */\n  useEffect(() => {\n    if(props.currTime.minutes === \"00\" && props.currTime.seconds === \"00\"){\n      props.handleSessionBreakChange();\n    }\n  })\n\n  let timeDisplay = `${props.currTime.minutes}:${props.currTime.seconds}`\n\n  return(\n\t<div id=\"timer\">\n\t\t<h1 id=\"timer-label\">\n\t\t\t{props.sessionOrBreak}\n\t\t</h1>\n    { (parseInt(props.currTime.seconds) <= 10 && props.currTime.minutes === \"00\")\n      ? <span id=\"time-left\" className = \"critical\"> {timeDisplay} </span>\n  \t\t: <span id=\"time-left\"> {timeDisplay}\t</span>\n    }\n\t\t<TimerControls\n\t\t\tresetTimer={props.resetTimer}\n\t\t\thandleStartPause= {props.handleStartPause}\n\t\t\tisRunning = {props.isRunning}\n\t\t\t/>\n\t\t<audio id =\"beep\" src=\"https://sampleswap.org/samples-ghost/SOUND%20EFFECTS%20and%20NOISES/Electro%20and%20Synthetic/222[kb]analog_alarm_siren.wav.mp3\">\n\t\t</audio>\n\t</div>\n\t\t)\n}\n\nexport default Timer;\n","\n\nconst LengthControls = props => {\n  return(\n\t\t<div id=\"lengthControls\">\n\t\t\t<div id=\"breakControls\">\n\t\t\t\t<h3 id=\"break-label\">\n\t\t\t\t\tBreak Length\n\t\t\t\t</h3>\n\t\t\t\t<button id=\"break-decrement\" onClick={(e)=> props.updateLengthAndTimer(\"breakLength\", props.breakLength - 1)}>\n\t\t\t\t\t-\n\t\t\t\t</button>\n\t\t\t\t<span id=\"break-length\">\n\t\t\t\t\t{props.breakLength}\n\t\t\t\t</span>\n        <button id=\"break-increment\" onClick={(e)=>props.updateLengthAndTimer(\"breakLength\", props.breakLength + 1)}>\n\t\t\t\t\t+\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div id=\"sessionControls\">\n\t\t\t\t<h3 id=\"session-label\">\n\t\t\t\t\tSession Length\n\t\t\t\t</h3>\n\t\t\t\t<button id=\"session-decrement\" onClick={(e)=>props.updateLengthAndTimer(\"sessionLength\", props.sessionLength - 1)}>\n\t\t\t\t\t-\n\t\t\t\t</button>\n\t\t\t\t<span id=\"session-length\">\n\t\t\t\t\t{props.sessionLength}\n\t\t\t\t</span>\n\t\t\t\t<button id=\"session-increment\" onClick={(e)=>props.updateLengthAndTimer(\"sessionLength\", props.sessionLength + 1)}>\n\t\t\t\t\t+\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default LengthControls;\n","import accurateInterval from 'accurate-interval';\nimport React, { Component } from 'react';\nimport Timer from './Timer';\nimport LengthControls from './LengthControls';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.initialState = {\n      sessionLength: 5,\n      breakLength: 1,\n      sessionOrBreak: \"Session\",\n      isRunning: false,\n      currTime: {\n        minutes: \"05\",\n        seconds: \"00\" } };\n\n    this.state = this.initialState;\n    this.resetTimer = this.resetTimer.bind(this);\n    this.updateLengthAndTimer = this.updateLengthAndTimer.bind(this);\n    this.handleStartPause = this.handleStartPause.bind(this);\n    this.handleSessionBreakChange = this.handleSessionBreakChange.bind(this);\n    this.countdown = this.countdown.bind(this);\n  }\n\n  updateLengthAndTimer(sessionOrBreakLength, newLengthValue) {\n    if (!this.state.isRunning) {\n      if (newLengthValue <= 60 && newLengthValue >= 1) {\n        //update corresponding length value on state\n        this.setState({ [sessionOrBreakLength]: newLengthValue });\n        //if the updated length also corresponds to the curent mode (session/break), also update the timer\n        if ((this.state.sessionOrBreak === \"Session\" && sessionOrBreakLength === \"sessionLength\")\n            || (this.state.sessionOrBreak === \"Break\" && sessionOrBreakLength === \"breakLength\")) {\n          this.setState({\n            currTime: {\n              minutes: this.convertToFormattedTimeString(newLengthValue),\n              seconds: \"00\"\n            }\n          })\n        }\n      }\n    }\n  }\n  // takes a number and converts it to a string in the form of mm/ss\n  convertToFormattedTimeString(time) {\n    let timeString = time.toString();\n    if (time < 10) {\n      timeString = \"0\" + timeString;\n    }\n    return timeString;\n  }\n  //handles the ticking of the timer by updating the currTime-state each call\n  countdown() {\n      let currMinutes = parseInt(this.state.currTime.minutes);\n      let currSeconds = parseInt(this.state.currTime.seconds);\n      let timer = new Date(new Date().setMinutes(currMinutes, currSeconds - 1));\n      let updatedMinutes = this.convertToFormattedTimeString(timer.getMinutes());\n      let updatedSeconds = this.convertToFormattedTimeString(timer.getSeconds());\n\n      this.setState({\n        currTime: {\n          minutes: updatedMinutes,\n          seconds: updatedSeconds } });\n  }\n\n  handleSessionBreakChange() {\n    this.timerID.clear();\n    let alarm = document.getElementById(\"beep\");\n    alarm.play();\n    // waits until the alarm sound has ended before it continues to run the timer in the other mode(session/break)\n    setTimeout(() => {\n      if (this.state.sessionOrBreak === \"Session\") {\n        this.setState(prevState => ({\n          ...prevState,\n          sessionOrBreak: \"Break\",\n          currTime: { minutes: this.convertToFormattedTimeString(prevState.breakLength), seconds: \"00\" } }));\n      } else {\n        this.setState(prevState => ({\n          ...prevState,\n          sessionOrBreak: \"Session\",\n          currTime: { minutes: this.convertToFormattedTimeString(prevState.sessionLength), seconds: \"00\" } }));\n      }\n\n      this.timerID = accurateInterval(this.countdown, 1000);\n    }, alarm.duration * 1000)\n\n  }\n\n  handleStartPause() {\n    if (!this.state.isRunning) {\n      this.setState({ isRunning: true });\n      this.timerID = accurateInterval(this.countdown, 1000);\n    } else {\n      this.setState({ isRunning: false });\n      this.timerID.clear();\n    }\n  }\n\n  resetTimer() {\n    if (this.timerID) {\n      this.timerID.clear();\n    }\n    document.getElementById(\"beep\").load();\n    this.setState(this.initialState);\n  }\n\n  render(){\n    return(\n\t\t\t<div id=\"container\">\n\t\t\t\t<Timer\n\t\t\t\t\tcurrTime={this.state.currTime}\n\t\t\t\t\tsessionOrBreak = {this.state.sessionOrBreak}\n\t\t\t\t\tisRunning = {this.state.isRunning}\n\t\t\t\t\thandleStartPause = {this.handleStartPause}\n          handleSessionBreakChange = {this.handleSessionBreakChange}\n\t\t\t\t\tresetTimer={this.resetTimer}\n\t\t\t\t/>\n\t\t\t\t<LengthControls\n  \t\t\t\tbreakLength = {this.state.breakLength}\n  \t\t\t\tsessionLength = {this.state.sessionLength}\n  \t\t\t\tupdateSessionOrBreakLength = {this.updateSessionOrBreakLength}\n  \t\t\t\tupdateLengthAndTimer = {this.updateLengthAndTimer}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
